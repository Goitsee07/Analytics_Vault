{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNrAm3w426KWdXSdrpxuLa3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Goitsee07/Analytics_Vault/blob/main/business_funding_analysis.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "VOClMY6HrIxy"
      },
      "outputs": [],
      "source": [
        "# %% [markdown]\n",
        "# # Business Funding Analysis\n",
        "# **By [Your Name]**\n",
        "# *Postgraduate Diploma in Data Analytics*\n",
        "#\n",
        "# ---\n",
        "#\n",
        "# This notebook analyzes funding data for South African businesses.\n",
        "# - **Data Source**: [Kaggle](https://www.kaggle.com/datasets/techsalerator/business-funding-data-in-south-africa)\n",
        "# - **Tools**: Python, Pandas, Matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %%\n",
        "import pandas as pd\n",
        "\n",
        "# Load cleaned data directly from your GitHub\n",
        "url = \"https://github.com/Goitsee07/Analytics_Vault/raw/main/projects/business_funding_analysis/data/cleaned/cleaned_business_funding.csv\"\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "# Show first 3 rows\n",
        "df.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "gwWmw2Wjr63b",
        "outputId": "433a6909-e15b-4280-f94e-333f9c5c3753"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Website Domain Effective date                   Found At Financing Type  \\\n",
              "0  trafigura.com            NaN  2024-03-14T01:00:00+01:00            NaN   \n",
              "1     zenobe.com            NaN  2024-05-31T02:00:00+02:00            NaN   \n",
              "2     zenobe.com            NaN  2024-07-24T02:00:00+02:00            NaN   \n",
              "\n",
              "  Financing Type Normalized      Categories  \\\n",
              "0                       NaN             NaN   \n",
              "1                       NaN             NaN   \n",
              "2                       NaN  private_equity   \n",
              "\n",
              "                                           Investors  Investors Count  \\\n",
              "0                                                NaN              NaN   \n",
              "1  avivainvestors.com, lloydsbankinggroup.com, sa...              9.0   \n",
              "2                                                NaN              NaN   \n",
              "\n",
              "           Amount  Amount Normalized  \\\n",
              "0           $1.9b         1900000000   \n",
              "1  $522.7 million          522700000   \n",
              "2          £41.7m           53671000   \n",
              "\n",
              "                                         Source Urls  amount_clean  \n",
              "0  https://www.tradefinanceglobal.com/posts/trafi...  1.900000e+09  \n",
              "1  https://realassets.ipe.com/news/aviva-among-le...  5.227000e+08  \n",
              "2  https://www.innovationnewsnetwork.com/zenobe-a...  4.170000e+07  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-51853467-f048-40a1-a5f8-a29b0960afb1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Website Domain</th>\n",
              "      <th>Effective date</th>\n",
              "      <th>Found At</th>\n",
              "      <th>Financing Type</th>\n",
              "      <th>Financing Type Normalized</th>\n",
              "      <th>Categories</th>\n",
              "      <th>Investors</th>\n",
              "      <th>Investors Count</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Amount Normalized</th>\n",
              "      <th>Source Urls</th>\n",
              "      <th>amount_clean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>trafigura.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024-03-14T01:00:00+01:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>$1.9b</td>\n",
              "      <td>1900000000</td>\n",
              "      <td>https://www.tradefinanceglobal.com/posts/trafi...</td>\n",
              "      <td>1.900000e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>zenobe.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024-05-31T02:00:00+02:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>avivainvestors.com, lloydsbankinggroup.com, sa...</td>\n",
              "      <td>9.0</td>\n",
              "      <td>$522.7 million</td>\n",
              "      <td>522700000</td>\n",
              "      <td>https://realassets.ipe.com/news/aviva-among-le...</td>\n",
              "      <td>5.227000e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>zenobe.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024-07-24T02:00:00+02:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>private_equity</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>£41.7m</td>\n",
              "      <td>53671000</td>\n",
              "      <td>https://www.innovationnewsnetwork.com/zenobe-a...</td>\n",
              "      <td>4.170000e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51853467-f048-40a1-a5f8-a29b0960afb1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-51853467-f048-40a1-a5f8-a29b0960afb1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-51853467-f048-40a1-a5f8-a29b0960afb1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5df17d1-36f7-447c-a8c7-944b195ab7aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5df17d1-36f7-447c-a8c7-944b195ab7aa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5df17d1-36f7-447c-a8c7-944b195ab7aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 35,\n  \"fields\": [\n    {\n      \"column\": \"Website Domain\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"trafigura.com\",\n          \"qohash.com\",\n          \"claritisoftware.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Effective date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-04-16 02:00:00+02:00\",\n        \"max\": \"2024-06-27 02:00:00+02:00\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2024-04-18T02:00:00+02:00\",\n          \"2024-04-16T02:00:00+02:00\",\n          \"2024-06-27T02:00:00+02:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Found At\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"2024-06-27T02:00:00+02:00\",\n          \"2024-04-18T02:00:00+02:00\",\n          \"2024-03-14T01:00:00+01:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financing Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Series I\",\n          \"Series A\",\n          \"Seed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financing Type Normalized\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"series_i\",\n          \"series_a\",\n          \"seed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Categories\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"series_b\",\n          \"seed\",\n          \"private_equity\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Investors\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"cibc.com\",\n          \"accelia.vc\",\n          \"avivainvestors.com, lloydsbankinggroup.com, santander.co.uk, swip.com, cibc.com, societegenerale.com, natwest.us, rabobank.com, mufg.jp\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Investors Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0770858707058104,\n        \"min\": 1.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          3.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"$50mn\",\n          \"$5M\",\n          \"$1.9b\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount Normalized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 478377448,\n        \"min\": 1600000,\n        \"max\": 2000000000,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          50000000,\n          5000000,\n          1900000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Source Urls\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"https://www.arabianbusiness.com/industries/technology/dubais-damac-group-bets-big-on-ai-with-50mn-investment-in-anthropic\",\n          \"https://www.prweb.com/releases/biointelligence-technologies-raises-5m-to-accelerate-growth-in-america-and-europe-302125188.html\",\n          \"https://www.tradefinanceglobal.com/posts/trafigura-raises-1-9b-in-new-credit-facilities-eyes-expansion\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount_clean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 477712006.3283443,\n        \"min\": 1600000.0,\n        \"max\": 2000000000.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          1900000000.0,\n          425000000.0,\n          50000000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [markdown]\n",
        "# ## Data Cleaning\n",
        "\n",
        "# %%\n",
        "from ast import literal_eval\n",
        "\n",
        "# Safely convert Categories\n",
        "def safe_convert(cat_str):\n",
        "    try:\n",
        "        return literal_eval(str(cat_str))\n",
        "    except:\n",
        "        return [str(cat_str)]  # Fallback for invalid formats\n",
        "\n",
        "df['Categories'] = df['Categories'].apply(safe_convert)\n",
        "\n",
        "# Handle dates\n",
        "df['Effective date'] = pd.to_datetime(df['Effective date'], errors='coerce')  # Convert invalid dates to NaT\n",
        "\n",
        "print(\"✅ Cleaning completed!\")\n",
        "print(\"Missing dates:\", df['Effective date'].isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5LDqQFIvr7HB",
        "outputId": "787ed3c2-d169-46fb-dd75-0a0a4f16a577"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Cleaning completed!\n",
            "Missing dates: 27\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [markdown]\n",
        "# ## Key Metrics\n",
        "\n",
        "# %%\n",
        "# Verify required columns exist\n",
        "required_cols = ['amount_clean', 'Categories']\n",
        "missing = [col for col in required_cols if col not in df.columns]\n",
        "\n",
        "if missing:\n",
        "    print(f\"❌ Missing columns: {missing}\")\n",
        "else:\n",
        "    total_funding = df['amount_clean'].sum()\n",
        "    avg_funding = df['amount_clean'].mean()\n",
        "    top_sector = df['Categories'].explode().value_counts().idxmax()\n",
        "\n",
        "    print(f\"📊 Total Funding: R{total_funding/1e9:.2f}B\")\n",
        "    print(f\"📊 Average Deal Size: R{avg_funding/1e6:.2f}M\")\n",
        "    print(f\"🏆 Top Sector: {top_sector}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sx4PCyW3r7Tm",
        "outputId": "b70860c1-239a-4b57-e9ff-c623d8162b47"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Total Funding: R6.63B\n",
            "📊 Average Deal Size: R189.31M\n",
            "🏆 Top Sector: nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [markdown]\n",
        "# ## Visualizations\n",
        "\n",
        "# %%\n",
        "# Install dependencies if missing\n",
        "try:\n",
        "    import matplotlib.pyplot as plt\n",
        "except ImportError:\n",
        "    !pip install matplotlib\n",
        "    import matplotlib.pyplot as plt\n",
        "\n",
        "# Ensure Categories are exploded\n",
        "df_exploded = df.explode('Categories')\n",
        "\n",
        "# Plot top sectors\n",
        "plt.figure(figsize=(10,5))\n",
        "df_exploded['Categories'].value_counts().head(5).plot(\n",
        "    kind='bar',\n",
        "    color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n",
        ")\n",
        "plt.title(\"Top 5 Sectors by Deal Count\", fontsize=14)\n",
        "plt.xlabel(\"Sector\", fontsize=12)\n",
        "plt.ylabel(\"Number of Deals\", fontsize=12)\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "p1yhaHPYr7cz",
        "outputId": "7ae16f97-32d9-4a1d-b2b7-e21ad329df39"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}